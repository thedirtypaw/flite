{
  "version": 3,
  "sources": ["../../../sanity/src/structure/panes/list/ListPaneContent.tsx", "../../../sanity/src/structure/panes/list/ListPaneHeader.tsx", "../../../sanity/src/structure/panes/list/ListPane.tsx"],
  "sourcesContent": ["import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  CommandList,\n  type CommandListItemContext,\n  type GeneralPreviewLayoutKey,\n  useGetI18nText,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {PaneContent, PaneItem, usePaneLayout} from '../../components'\nimport {type PaneListItem, type PaneListItemDivider} from '../../types'\n\ninterface ListPaneContentProps {\n  childItemId?: string\n  isActive?: boolean\n  items: (PaneListItem<unknown> | PaneListItemDivider)[] | undefined\n  layout?: GeneralPreviewLayoutKey\n  showIcons: boolean\n  title: string\n}\n\nconst Divider = styled.hr`\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n`\n\n/**\n * @internal\n */\nexport function ListPaneContent(props: ListPaneContentProps) {\n  const {childItemId, items, isActive, layout, showIcons, title} = props\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const getI18nText = useGetI18nText(\n    items?.filter(\n      (item): item is Exclude<typeof item, {type: 'divider'}> => item.type !== 'divider',\n    ),\n  )\n\n  const getItemDisabled = useCallback(\n    (itemIndex: number) => {\n      return items?.find((_, i) => i === itemIndex)?.type === 'divider'\n    },\n    [items],\n  )\n\n  const shouldShowIconForItem = useCallback(\n    (item: PaneListItem): boolean => {\n      const itemShowIcon = item.displayOptions?.showIcon\n\n      // Specific true/false on item should have precedence over list setting\n      if (typeof itemShowIcon !== 'undefined') {\n        return itemShowIcon !== false // Boolean(item.icon)\n      }\n\n      // If no item setting is defined, defer to the pane settings\n      return showIcons !== false // Boolean(item.icon)\n    },\n    [showIcons],\n  )\n\n  const renderItem = useCallback(\n    (item: PaneListItem<unknown> | PaneListItemDivider, ctx: CommandListItemContext) => {\n      const {virtualIndex: itemIndex} = ctx\n\n      if (item.type === 'divider') {\n        return (\n          // eslint-disable-next-line react/no-array-index-key\n          <Box key={`divider-${itemIndex}`} marginBottom={1}>\n            <Divider />\n          </Box>\n        )\n      }\n\n      const pressed = !isActive && childItemId === item.id\n      const selected = isActive && childItemId === item.id\n      // If this is a document list item, pass on the ID and type,\n      // otherwise leave it undefined to use the passed title and gang\n      const value =\n        item._id && item.schemaType\n          ? {_id: item._id, _type: item.schemaType.name, title: item.title}\n          : undefined\n\n      return (\n        <PaneItem\n          icon={shouldShowIconForItem(item) ? item.icon : false}\n          id={item.id}\n          key={item.id}\n          layout={layout}\n          marginBottom={1}\n          pressed={pressed}\n          schemaType={item.schemaType}\n          selected={selected}\n          title={getI18nText(item).title}\n          value={value}\n        />\n      )\n    },\n    [childItemId, getI18nText, isActive, layout, shouldShowIconForItem],\n  )\n\n  return (\n    <PaneContent overflow={layoutCollapsed ? 'hidden' : 'auto'}>\n      {items && items.length > 0 && (\n        <CommandList\n          activeItemDataAttr=\"data-hovered\"\n          ariaLabel={title}\n          canReceiveFocus\n          getItemDisabled={getItemDisabled}\n          itemHeight={51}\n          items={items}\n          onlyShowSelectionWhenActive\n          paddingBottom={1}\n          paddingX={3}\n          renderItem={renderItem}\n          wrapAround={false}\n        />\n      )}\n    </PaneContent>\n  )\n}\n", "import {ArrowLeftIcon} from '@sanity/icons'\n\nimport {Button} from '../../../ui-components'\nimport {BackLink, PaneHeader, PaneHeaderActions, usePane} from '../../components'\nimport {type PaneMenuItem, type PaneMenuItemGroup} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface ListPaneHeaderProps {\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport const ListPaneHeader = ({index, menuItems, menuItemGroups, title}: ListPaneHeaderProps) => {\n  const {features} = useStructureTool()\n  const {collapsed, isLast} = usePane()\n  // Prevent focus if this is the last (non-collapsed) pane.\n  const tabIndex = isLast && !collapsed ? -1 : 0\n\n  return (\n    <PaneHeader\n      actions={<PaneHeaderActions menuItems={menuItems} menuItemGroups={menuItemGroups} />}\n      backButton={\n        features.backButton &&\n        index > 0 && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: 'Back'}}\n          />\n        )\n      }\n      tabIndex={tabIndex}\n      title={title}\n    />\n  )\n}\n", "import {Card, Code} from '@sanity/ui'\nimport {useI18nText} from 'sanity'\n\nimport {Pane} from '../../components'\nimport {_DEBUG} from '../../constants'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {ListPaneContent} from './ListPaneContent'\nimport {ListPaneHeader} from './ListPaneHeader'\n\ntype ListPaneProps = BaseStructureToolPaneProps<'list'>\n\n/**\n * @internal\n */\nexport function ListPane(props: ListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n\n  const {defaultLayout, displayOptions, items, menuItems, menuItemGroups} = pane\n  const showIcons = displayOptions?.showIcons !== false\n  const {title} = useI18nText(pane)\n\n  return (\n    <Pane\n      currentMaxWidth={350}\n      data-testid=\"structure-tool-list-pane\"\n      data-ui=\"ListPane\"\n      id={paneKey}\n      maxWidth={640}\n      minWidth={320}\n      selected={isSelected}\n    >\n      {_DEBUG && (\n        <Card padding={4} tone=\"transparent\">\n          <Code>{pane.source || '(none)'}</Code>\n        </Card>\n      )}\n\n      <ListPaneHeader\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <ListPaneContent\n        childItemId={childItemId}\n        isActive={isActive}\n        items={items}\n        layout={defaultLayout}\n        key={paneKey}\n        showIcons={showIcons}\n        title={title}\n      />\n    </Pane>\n  )\n}\n"],
  "mappings": "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",
  "names": ["Divider", "styled", "hr", "ListPaneContent", "props", "$", "_c", "childItemId", "items", "isActive", "layout", "showIcons", "title", "collapsed", "layoutCollapsed", "usePaneLayout", "t0", "filter", "_temp", "getI18nText", "useGetI18nText", "t1", "itemIndex", "find", "_", "i", "type", "getItemDisabled", "t2", "item_0", "itemShowIcon", "item", "displayOptions", "showIcon", "shouldShowIconForItem", "t3", "item_1", "ctx", "virtualIndex", "itemIndex_0", "pressed", "id", "selected", "value", "_id", "schemaType", "_type", "name", "undefined", "icon", "renderItem", "t4", "t5", "length", "t6", "ListPaneHeader", "index", "menuItems", "menuItemGroups", "features", "useStructureTool", "isLast", "usePane", "tabIndex", "backButton", "BackLink", "ArrowLeftIcon", "content", "ListPane", "isSelected", "pane", "paneKey", "defaultLayout", "useI18nText", "source", "_DEBUG"]
}
